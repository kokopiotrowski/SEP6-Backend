/*
 * SEP6-movies backend
 *
 * Backend part of the project delivered for SEP6 course - Movies platform  Authors of project:  Konrad Piotrowski (280053) Aleksander Stefan Bialik (280027)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"net/http"
	"studies/SEP6-Backend/auth"
	"studies/SEP6-Backend/db"
	"studies/SEP6-Backend/reserr"
	swagger "studies/SEP6-Backend/swagger/models"
	"studies/SEP6-Backend/util"
)

func UserLoginPost(w http.ResponseWriter, r *http.Request) {
	var loginInput swagger.Login
	if util.DecodeBodyAsJSON(w, r, &loginInput) {
		db, err := db.GetDB()
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, reserr.Internal("DB retrieve error", err, "could not access database"))
			return
		}
		token, err := auth.LogIn(db, loginInput)
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, reserr.Internal("Error with generating token ", err, ""))
			return
		}

		util.RespondWithJSON(w, r, http.StatusOK, token, nil)
	}
}

func UserPlaylistAddToFavouritePost(w http.ResponseWriter, r *http.Request) {
	err := auth.TokenValid(r)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusUnauthorized, "Unauthenticated", err)
		return
	}
	userId, err := auth.GetUserIdFromToken(r)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, "Could not retrieve user id from token", err)
		return
	}
	var fm swagger.FavouriteMovie
	if util.DecodeBodyAsJSON(w, r, &fm) {
		err = db.AddFavouriteMovie(userId, fm.MovieId, fm.Title, fm.PosterPath)
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, "Adding favourite movie to users list failed", err)
			return
		}

		util.RespondWithJSON(w, r, http.StatusOK, "Movie added to favourites", nil)
	}
}

func UserPlaylistGetFavouriteGet(w http.ResponseWriter, r *http.Request) {
	err := auth.TokenValid(r)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusUnauthorized, "Unauthenticated", err)
		return
	}
	userId, err := auth.GetUserIdFromToken(r)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, "Could not retrieve user id from token", err)
		return
	}

	movies, err := db.GetFavouriteMovies(userId)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, "Could not retrieve list of favourite movies", err)
		return
	}

	util.RespondWithJSON(w, r, http.StatusOK, movies, nil)
}

func UserPlaylistRemoveFromFavouriteMovieIdDelete(w http.ResponseWriter, r *http.Request) {
	err := auth.TokenValid(r)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusUnauthorized, "Unauthenticated", err)
		return
	}
	userId, err := auth.GetUserIdFromToken(r)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, "Could not retrieve user id from token", err)
		return
	}
	var movieId int64
	if util.DecodeVarAsInt64(w, r, "movieId", &movieId) {
		err = db.DeleteFavouriteMovie(userId, movieId)
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, "Removing favourite movie from users list failed", err)
			return
		}
		util.RespondWithJSON(w, r, http.StatusOK, "Movie removed :(", nil)
	}
}

func UserRegisterPost(w http.ResponseWriter, r *http.Request) {
	var register swagger.Register
	if util.DecodeBodyAsJSON(w, r, &register) {
		db, err := db.GetDB()
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, reserr.Internal("DB retrieve error", err, "could not access database"))
			return
		}
		_, err = auth.RegisterUser(db, register)
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, reserr.Internal("Registering failed ", err, ""))
			return
		}
		util.RespondWithJSON(w, r, http.StatusOK, "User registered", nil)
	}

}
