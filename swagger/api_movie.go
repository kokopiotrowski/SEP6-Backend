/*
 * SEP6-movies backend
 *
 * Backend part of the project delivered for SEP6 course - Movies platform  Authors of project:  Konrad Piotrowski (280053) Aleksander Stefan Bialik (280027)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"errors"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"studies/SEP6-Backend/moviesdb"
	"studies/SEP6-Backend/util"
)

func MovieGet(w http.ResponseWriter, r *http.Request) {

	q := r.URL.Query()
	search, present := q["search"]
	if !present || len(search) == 0 {
		search = []string{""}
	}

	page, present := q["page"]
	if !present || len(page) == 0 {
		page = []string{"1"}
	}

	pageParsed, err := strconv.ParseInt(page[0], 10, 64)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to parse pagination"))
		return
	}
	searchedMovies, err := moviesdb.MovieSearch(search[0], pageParsed)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to search for movies"))
		return
	}
	util.RespondWithJSON(w, r, http.StatusOK, searchedMovies, nil)
}

func MovieMovieIdGet(w http.ResponseWriter, r *http.Request) {
	q := r.URL.Query()
	var movieId int64

	if util.DecodeVarAsInt64(w, r, "movieId", &movieId) {

		language, present := q["language"]
		if !present || len(language) == 0 {
			language = []string{""}
		}
		searchedMovies, err := moviesdb.MovieMovieIdGet(strings.Join(language, ""), movieId)
		if err != nil {
			util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to search for movies"))
			return
		}
		util.RespondWithJSON(w, r, http.StatusOK, searchedMovies, nil)
	}

}

func MoviePopularGet(w http.ResponseWriter, r *http.Request) {

	q := r.URL.Query()

	page, present := q["page"]
	if !present || len(page) == 0 {
		page = []string{"1"}
	}
	pageParsed, err := strconv.ParseInt(strings.Join(page, ""), 10, 64)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to parse pagination"))
		return
	}
	language, present := q["language"]
	if !present || len(language) == 0 {
		language = []string{""}
	}
	popularMovies, err := moviesdb.MoviesGetPopular("", strings.Join(language, ""), pageParsed)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to search for movies"))
		return
	}
	util.RespondWithJSON(w, r, http.StatusOK, popularMovies, nil)
}

func MovieTopGet(w http.ResponseWriter, r *http.Request) {

	q := r.URL.Query()

	page, present := q["page"]
	if !present || len(page) == 0 {
		fmt.Println("page not present")
		page = []string{"1"}
	}

	pageParsed, err := strconv.ParseInt(page[0], 10, 64)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to parse pagination"))
		return
	}
	language, present := q["language"]
	if !present || len(language) == 0 {
		language = []string{""}
	}
	topMovies, err := moviesdb.MovieTopGet("", strings.Join(language, ""), pageParsed)
	if err != nil {
		util.RespondWithJSON(w, r, http.StatusInternalServerError, nil, errors.New("Failed to search for movies"))
		return
	}
	util.RespondWithJSON(w, r, http.StatusOK, topMovies, nil)
}
